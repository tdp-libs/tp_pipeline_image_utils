#include "tp_pipeline_image_utils/step_delegates/ScaleStepDelegate.h"
#include "tp_data_image_utils/members/ColorMapMember.h"

#include "tp_image_utils/Scale.h"

#include "tp_pipeline/StepDetails.h"
#include "tp_pipeline/StepInput.h"

#include "tp_data/Collection.h"
#include "tp_utils/DebugUtils.h"

namespace tp_pipeline_image_utils
{
namespace
{
//##################################################################################################
std::pair<size_t,size_t> calculateSize(ScaleStepDelegate::SizeCalculation sizeCalculation,
                                       size_t size,
                                       size_t width,
                                       size_t height,
                                       size_t srcWidth,
                                       size_t srcHeight)
{
  std::pair<size_t, size_t> result(width, height);

  if(srcWidth==0 || srcHeight==0)
    return result;

  switch(sizeCalculation)
  {
  case ScaleStepDelegate::SizeCalculation::UseWidthHeight: //---------------------------------------
  {
    if(width==0 && height>0)
    {
      float f = float(height) / float(srcHeight);
      result.first = size_t(float(srcWidth) * f);
    }
    else if(height==0 && width>0)
    {
      float f = float(width) / float(srcWidth);
      result.second = size_t(float(srcHeight) * f);
    }

    if(result.first<1)
      result.first = srcWidth;

    if(result.second<1)
      result.second = srcHeight;
    break;
  }

  case ScaleStepDelegate::SizeCalculation::MaintainAspectMinSize: //--------------------------------
  {
    float f = float(size) / float(tpMin(srcWidth, srcHeight));
    result.first  = size_t(float(srcWidth)  * f);
    result.second = size_t(float(srcHeight) * f);
    break;
  }

  case ScaleStepDelegate::SizeCalculation::MaintainAspectMaxSize: //--------------------------------
  {
    float f = float(size) / float(tpMax(srcWidth, srcHeight));
    result.first  = size_t(float(srcWidth)  * f);
    result.second = size_t(float(srcHeight) * f);
    break;
  }

  }

  return result;
}

//##################################################################################################
void _fixupParameters(tp_pipeline::StepDetails* stepDetails)
{
  stepDetails->setOutputNames({"Output data"});

  std::vector<tp_utils::StringID> validParams;
  const auto& parameters = stepDetails->parameters();

  {
    tp_utils::StringID name = sizeCalculationSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "How to calculate the size of the output image.";
    param.setEnum(ScaleStepDelegate::sizeCalculationStrings());
    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  auto sizeCalculation = ScaleStepDelegate::sizeCalculationFromString(stepDetails->parameterValue<std::string>(sizeCalculationSID()));

  {
    const tp_utils::StringID& name = destinationSizeSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "The size of the output image to generate.";
    param.type = tp_pipeline::sizeSID();
    param.min = size_t(0);
    param.max = size_t(10000);
    param.enabled = (sizeCalculation==ScaleStepDelegate::SizeCalculation::MaintainAspectMinSize ||
                     sizeCalculation==ScaleStepDelegate::SizeCalculation::MaintainAspectMaxSize);

    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  {
    const tp_utils::StringID& name = destinationWidthSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "The width of the image generated by this step.";
    param.type = tp_pipeline::sizeSID();
    param.min = size_t(0);
    param.max = size_t(10000);
    param.enabled = (sizeCalculation==ScaleStepDelegate::SizeCalculation::UseWidthHeight);

    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  {
    const tp_utils::StringID& name = destinationHeightSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "The height of the image generated by this step.";
    param.type = tp_pipeline::sizeSID();
    param.min = size_t(0);
    param.max = size_t(10000);
    param.enabled = (sizeCalculation==ScaleStepDelegate::SizeCalculation::UseWidthHeight);

    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  {
    const tp_utils::StringID& name = colorImageSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "The source image to scale.";
    param.setNamedData();

    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  {
    const tp_utils::StringID& name = tp_data_image_utils::byteMapSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "The source byte map to scale.";
    param.setNamedData();
    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  {
    const tp_utils::StringID& name = functionSID();
    auto param = tpGetMapValue(parameters, name);
    param.name = name;
    param.description = "The function to use for downscaling images.";
    param.setEnum({"Default", "Custom"});
    stepDetails->setParamerter(param);
    validParams.push_back(name);
  }

  stepDetails->setParametersOrder(validParams);
  stepDetails->setValidParameters(validParams);
}
}

//##################################################################################################
ScaleStepDelegate::ScaleStepDelegate():
  AbstractStepDelegate(scaleSID(), {processingSID()})
{

}

//##################################################################################################
void ScaleStepDelegate::executeStep(tp_pipeline::StepDetails* stepDetails,
                                    const tp_pipeline::StepInput& input,
                                    tp_data::Collection& output) const
{
  size_t width         = stepDetails->parameterValue<size_t>( destinationWidthSID());
  size_t height        = stepDetails->parameterValue<size_t>(destinationHeightSID());
  size_t size          = stepDetails->parameterValue<size_t>(destinationSizeSID());
  auto sizeCalculation = sizeCalculationFromString(stepDetails->parameterValue<std::string>(sizeCalculationSID()));

  std::string colorImageName = stepDetails->parameterValue<std::string>(colorImageSID());
  std::string    byteMapName = stepDetails->parameterValue<std::string>(tp_data_image_utils::byteMapSID());

  if(!colorImageName.empty())
  {
    const tp_data_image_utils::ColorMapMember* src{nullptr};
    input.memberCast(colorImageName, src);
    if(src)
    {
      auto outMember = new tp_data_image_utils::ColorMapMember(stepDetails->lookupOutputName("Output data"));
      output.addMember(outMember);
      std::pair<size_t, size_t> calculatedSize = calculateSize(sizeCalculation, size, width, height, src->data.width(), src->data.height());
      outMember->data = tp_image_utils::scale(src->data, calculatedSize.first, calculatedSize.second);
    }
    else
    {
      output.addError("Failed to find color image.");
    }
  }

  if(!byteMapName.empty())
  {
    const tp_data_image_utils::ColorMapMember* src{nullptr};
    input.memberCast(byteMapName, src);
    if(src)
    {
      auto outMember = new tp_data_image_utils::ColorMapMember(stepDetails->lookupOutputName("Output data"));
      output.addMember(outMember);
      std::pair<size_t, size_t> calculatedSize = calculateSize(sizeCalculation, size, width, height, src->data.width(), src->data.height());
      outMember->data = tp_image_utils::scale(src->data, calculatedSize.first, calculatedSize.second);
    }
    else
    {
      output.addError("Failed to find byte map image.");
    }
  }
}

//##################################################################################################
void ScaleStepDelegate::fixupParameters(tp_pipeline::StepDetails* stepDetails) const
{
  _fixupParameters(stepDetails);
}

//##################################################################################################
const std::vector<std::string>& ScaleStepDelegate::sizeCalculationStrings()
{
  static std::vector<std::string> sizeCalculationStrings{"UseWidthHeight",
                                                         "MaintainAspectMinSize",
                                                         "MaintainAspectMaxSize"};
  return sizeCalculationStrings;
}

//##################################################################################################
ScaleStepDelegate::SizeCalculation ScaleStepDelegate::sizeCalculationFromString(const std::string& sizeCalculation)
{
  if(sizeCalculation=="UseWidthHeight")
    return ScaleStepDelegate::SizeCalculation::UseWidthHeight;
  if(sizeCalculation=="MaintainAspectMinSize")
    return ScaleStepDelegate::SizeCalculation::MaintainAspectMinSize;
  if(sizeCalculation=="MaintainAspectMaxSize")
    return ScaleStepDelegate::SizeCalculation::MaintainAspectMaxSize;
  return ScaleStepDelegate::SizeCalculation::UseWidthHeight;
}

//##################################################################################################
std::string ScaleStepDelegate::sizeCalculationToString(ScaleStepDelegate::SizeCalculation sizeCalculation)
{
  switch (sizeCalculation)
  {
  case ScaleStepDelegate::SizeCalculation::UseWidthHeight:        return "UseWidthHeight";
  case ScaleStepDelegate::SizeCalculation::MaintainAspectMinSize: return "MaintainAspectMinSize";
  case ScaleStepDelegate::SizeCalculation::MaintainAspectMaxSize: return "MaintainAspectMaxSize";
  }

  return "UseWidthHeight";
}

//##################################################################################################
tp_pipeline::StepDetails* ScaleStepDelegate::makeStepDetails(const std::string& inName,
                                                             const std::string& outName,
                                                             size_t width,
                                                             size_t height)
{
  auto stepDetails = new tp_pipeline::StepDetails(scaleSID());
  _fixupParameters(stepDetails);  
  stepDetails->setParameterValue(colorImageSID(), inName);
  stepDetails->setOutputMapping({{"Output data", outName}});
  stepDetails->setParameterValue(sizeCalculationSID(), sizeCalculationToString(ScaleStepDelegate::SizeCalculation::UseWidthHeight));
  stepDetails->setParameterValue( destinationWidthSID(), width );
  stepDetails->setParameterValue(destinationHeightSID(), height);
  return stepDetails;
}

//##################################################################################################
tp_pipeline::StepDetails* ScaleStepDelegate::makeStepDetails(const std::string& inName,
                                                             const std::string& outName,
                                                             ScaleStepDelegate::SizeCalculation sizeCalculation,
                                                             size_t size)
{
  auto stepDetails = new tp_pipeline::StepDetails(scaleSID());
  _fixupParameters(stepDetails);
  stepDetails->setParameterValue(colorImageSID(), inName);
  stepDetails->setOutputMapping({{"Output data", outName}});
  stepDetails->setParameterValue(sizeCalculationSID(), sizeCalculationToString(sizeCalculation));
  stepDetails->setParameterValue(destinationSizeSID(), size);
  return stepDetails;
}

}
